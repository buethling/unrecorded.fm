// TODO: make this object oriented :)
(function (root) {
  var playbackToken         = "{{token}}",
      domain                = "{{domain}}",
      apiswf                = null,
      socket                = null,
      currentSource         = null,
      currentTrack          = null,
      currentSourcePosition = null;


  $(document).ready(function() {
    var flashvars  = { 'playbackToken': playbackToken, 'domain': domain, 'listener': 'Unrecorded' };
    var params     = { 'allowScriptAccess': 'always' };
    var attributes = {};
    swfobject.embedSWF('http://www.rdio.com/api/swf/', 'apiswf', 1, 1, '9.0.0', 'expressInstall.swf', flashvars, params, attributes);
  });

  root.Unrecorded = {};

  Unrecorded.ready = function ready(user) {
    console.log("ready");
    apiswf = $('#apiswf').get(0);
    socket = io.connect();

    $('.play').click(function() { 
      var playKey = $(".play_key").val();
      apiswf.rdio_play(playKey);
      currentSource = playKey;
    });

    $('.next').click(function() { 
      socket.emit('next?');
      console.log('unrecorded: sent next?');
    });
    
    socket.on('next', function() { 
      console.log('unrecorded: received next');
      apiswf.rdio_next();
    });

    socket.on('listeners', function(data) { 
      console.log('unrecorded: received listeners');
      $('.listeners').text(data.listeners);
    });
    
    // mute is local and should not send a socket event
    //
    $('.vol').click(function(ev) {
      var target  = $(ev.target),
          muted   = target.hasClass('volume_mute');

      if (muted) {
        target.removeClass('volume_mute')
              .addClass('volume');
      }
      else {
        target.addClass('volume_mute')
              .removeClass('volume');
      }
      
      apiswf.rdio_setMute(!muted);
    });
    
    // when the album art is clicked show track list
    //
    $('.album').click(function(ev) {
    	var target  = $(ev.target);
    	$('.cover').toggle();
    	$('.trackList').toggle();
    });


    // When someone asks what you're listening to, only respond if you've
    // actually started a track.
    //
    socket.on('playing?', function() { 
      console.log('unrecorded: received playing?');

      if(currentTrack) { 
        socket.emit('playing', { 
          playingSource: currentSource, 
          playingTrack: currentTrack,
          sourcePosition: currentSourcePosition
        });

        console.log('unrecorded: sent playing; source=' + currentSource + ' track=' + currentTrack + ' position=' + currentSourcePosition);
      }
    });

    // Whenever we're told we're the host, update the UI.
    //
    socket.on('hosting', function() { 
      $('.hosting').show();
    });

    // When someone tells you what they're listening to, only attempt to
    // play it if the necessary information is available.
    //
    socket.on('playing', function(data) { 
      console.log('unrecorded: received playing; source=' + data.playingSource + ' track=' + data.playingTrack + ' position=' + data.sourcePosition);

      if(data.playingSource != null && data.sourcePosition != null) {

        // Set source if necessary.
        //
        if(currentSource != data.playingSource) { 
          apiswf.rdio_play(data.playingSource);
          currentSource = data.playingSource;
        }

        // Move to position in the source.
        //
        apiswf.rdio_setCurrentPosition(data.sourcePosition);
        currentSourcePosition = data.sourcePosition;

        // Set track.
        //
        currentTrack = data.playingTrack;

        console.log('unrecorded: rdio_play triggered; source=' + data.playingSource + ' position=' + data.sourcePosition);
      }
    });
    
    // When we receive the trackList update the trackList div
    //
    socket.on('trackList', function(data) {
    	console.log('unrecorded: track listing={' + data + '}');
    	var trackList = data;
    	var tracksOL = '<ol>';
    	
    	for (track in trackList) {
    		console.log("name: " + trackList[track].name + " url: " + trackList[track].url);
    		tracksOL += '<li><a href="' + trackList[track].url + '" target="_blank">' + trackList[track].name + '</a></li>';
    	}
    	
    	tracksOL += '</ol>';
    	$('.trackList').append(tracksOL);
    });
    
    // When you start playing something, send events about tracks, but
    // don't send playlist events, because the client can get that data
    // from the track event which immediately follows.  Also update local
    // pointers to source and position as they change, and modify the UI
    // when we get track information.
    //
    Unrecorded.playingTrackChanged = function playingTrackChanged(playingTrack, sourcePosition) {
      console.log('unrecorded: playingTrackChanged; source=' + currentSource + ' track=' + playingTrack + ' position=' + sourcePosition);

      currentTrack          = playingTrack;
      currentSourcePosition = sourcePosition;

      if (playingTrack) { 
        socket.emit('playing', { 
          playingSource: currentSource, 
          playingTrack: playingTrack,
          sourcePosition: sourcePosition
        });

        console.log('unrecorded: sent playing; source=' + currentSource + ' track=' + currentTrack + ' position=' + currentSourcePosition);

        updateTrackUI(currentSource, currentTrack, currentSourcePosition);
      }
    }
  }

  var updateTrackUI = function(playingSource, playingTrack, sourcePosition) { 
    $('.song_title').text(playingTrack.name);
    $('.album .cover').attr("src", playingTrack.icon);
  };

}(this));
